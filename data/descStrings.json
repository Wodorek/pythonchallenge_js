{
  "desc0": "A warmup question, not much to it.\r\n\r\nThe solution is just a Math.pow() function, wrapped in the solution function, totally unnecessary, but keeps the solution format uniform.",
  "desc1": "The pink text is encoded with a simple shift cypher.\r\n\r\nAll that needs to be done, is to shift every letter to the right by 2, wrapping around to the beginning if needed. Characters other than letters are ignored",
  "desc2": "In the website source, there is a very long string of characters (link to the file with the string below), that needs to be filtered for unique characters.\r\n\r\nThis is done by first looping over the string, and keeping track how many times each character appeared in the 'counts' object, then deleting properties that have a value bigger than 1, and returning a joined string of keys, that remain in 'counts'",
  "desc3": "This is an another one with a long string in the website source (file below). \r\n\r\nThis time, a substrings in exact 'AAAbCCC' format need to be found in the long string. Solution to that problem is a regex. After checking the entire string, we get an array of matches. We only care about the lowercase letter in the middle, so the solution is to return a joined string of 3rd element of each match.",
  "desc4": "Clicking the image takes us to the page with different address, and just 'and the next nothing is 44827' string for content.\r\n\r\nThe solution now, is to follow along the number sequence, by replacing the 'nothing' parameter with the number from the website content.\r\n\r\nWe encounter two problems along the way: Halfway, we are asked to start dividing the given number by two, and later some additional numbers appear in the website content, that are meant to mislead the regex used to extract the numbers from the string. The if statemets in resp.on take care of that.\r\n\r\nNote: The part of opening and checking the url contents is done in separate function in node, because of CORS issues.",
  "desc5": "So, this one is a bit of a pickle (pun intended). It requires you to find a long string once again and then \"unpickle\" it, into an object that, when correctly printed into the console will show the solution.\r\n\r\nSadly JS has no way to do the unpickling part. There exist all of 3 packages that can do that job, an none of them work in this particular scenario. \r\n\r\nSo for now the solution is empty. I'll update it if I ever come across unpickling for JS.",
  "desc6": "This one requires a package, that will be used to unpack and read contents of a .zip file. After unpacking and reading the \"readme.txt\" we are met with similar challenge to the one in #4. We go through the list of entries in our file, extracting the file name of the next one from the contents, until instead of \"Next nothing is xxxx\" message, we get: \"Collect the comments\".\r\n\r\nZip files can contain some comments, so we gather them from the list of entries inside of the loop, and print them to the console, joined.\r\n\r\nThe rest is simple, read the solution from the console, realize that the \"image\" text is a red herring, and the actual solution is hidden in the letters making up the bigger letters.",
  "desc7": "This one contains no hints, just an image with a message encoded in the greyscale strip in the middle.\r\n\r\nTo extract the message, we need to get the rgba data of from each of the little rectangles, and map the color values to ASCII characters.\r\n\r\nSince Javascript canvas has a method to access image data, the solution for this challenge is a React component, where first the image is drawn, and then the color values are gathered and decoded in the loop.",
  "desc8": "To solve this puzzle, we need to find an unsername and a password for the next page.\r\n\r\nIn the page source, there are two strings, \"un\", and \"pw\". They represent compressed username and password, so to continue, we need to decompress them. To do that, on the backend we us a package called compressjs.The package accepts a buffer, so we create one, setting encoding to ascii. Finally, to we convert a buffer returned by the package to a readable string, which reveals data needed to proceed.",
  "desc9": "This is a pretty straightforward one. The image on the page suggests the solution, connect the dots. But what dots?\r\n\r\nIn the page source we can find two big arrays of numbers. We can pretty much disregard the second array, and just work with the first one. All that needs to be done, is to, create a polygon and fill it. Turns out, in the \"first\" array, the even numbers represent x and odd represent y coordinate on a canvas. Knowing that, we can loop over every point, connecting the dots, and fill the image at the end. Those steps reveal an image of a bull, which is a solution to this level",
  "desc10": "Clicking on the image takes us to the page with \"a = [1, 11, 21, 1211, 111221,\" as only content. This is a look-and-say sequence. Each number in the sequence is genereated by counting the digits and writing them like we would read the out loud. For example, next in sequence to 111221 is 312211 because we see three \"1\" followed by two \"2\" and one \"1\".\r\n\r\nThe challenge now, is to find 30th term of this sequence, and the solution will be its length.\r\n\r\nOnce again we use power of regular expressions, to find matches of consecutive numbers, joining it into a string, and finally putting it into a 30 iteration loop, to find the 30th term, which has a length of 5808\r\n\r\n",
  "desc11": "There are no hints for this challenge, the only clue is the title, and the fuzzy looks of the image. From that we can try to split the image into two images, one with odd, and one with even pixels, which should reveal the solution to the puzzle.\r\n\r\nAs we are working with images again, the solution is a react component, using canvas for image manipulation. \r\n\r\nImage constructed from odd pixels shows black and red image, with the word \"evil\" in the right upper corner. This is our solution",
  "desc12": "By following the file names, we are instructed to replace .jpg in evil2.jpg with .gfx, which will download a .gfx file. Since we are working with files, we are using Node again. Opening the file itself doesn't provide much useful information.\r\n\r\nTaking the image for this challenge as a clue, we should deal the bytes from evil2.gfx into 5 piles, just like dealing playing cards. Having 5 different buffers, we can create 5 .jpg files, which, while inspected read: 'dis', 'pro', 'port', 'ional', 'ity', with the last one being crossed out. So the solution is the word \"disproportional\".\r\n\r\nYou see the files on github, links below.",
  "desc13": "In the image, key number 5 is clickable. Clicking on it takes us to a page with php code. We can communicate with it, using a package called davexmlrpc. \r\n\r\nWe need to call few methods to find out the solution: First, list every possible method. One of them is not a system one, so it is the one we probably should call. In next two steps, find out what the method does, and what parameters it accepts, and what it returns. Finally, to get the solution, call the \"phone\" method with parameter \"Bert\".\r\n\r\nBut why \"Bert\". The hint for this challenge says \"phone that evil\". In the previous challenge, if we continue following the evil1.jpg evil2.jpg etc. chain, to the 4th iteration, we will get an error with a message \"Bert is evil! Go back!\". Since we need to phone the evil, we phone Bert.\r\n\r\nThe phone method returns \"555-ITALY\". The 555 is a fake american number prefix, we can disregard that, and just use \"italy\" to go to the next level.",
  "desc14": "Another one where we need to work with image manipulation, so canvas in react component it is.\r\n\r\nWe already opened, read, and created images before, so the real challenge here, is creating an algorithm to create a spiral from the image below the bun photo. The image appears square, but in reality, it is 1px high and 10000px long.\r\n\r\nAfter running the algorithm (see comments in the code section for how it works) we see an image of the cat. This, however, is not a solution. The solution is actually the cats name, Uzi.",
  "desc15": "This puzzle requires working with every developers favourite concept: dates! Thanfully, nothing that the vanilla JS Date object can't handle. \r\n\r\nThere are multiple clues, pointing us to the solution: The title of the riddle, two hints in the page source, and what is visible on the challenge image. See comments inside the code block for more information.\r\n\r\nTaking all of the clues together, we know that we are looking for a person, not a youngest one, related to a particular date: a leap year between 1006 and 1996,  in which Jan 26th is a Monday.\r\n\r\nSo we find the year, 1756, and the date, Jan 27th, which is a brithday of Mozart, and that is our solution.",
  "desc16": "Yet another challenge that requires manipulating an image, so, again, a component with canvas is used to solve it. From the title we can work out what needs to be done: something has to be put into a straight line. The first thing that jumps out are the strips of pink color, constant in length, and looks like there is only one in each horizontal line in the image.\r\n\r\nBy moving every pink segment to the left, and shifting the rest of the image accordingly, the solution is revealed: the word \"romance\"",
  "desc17": ""
}
