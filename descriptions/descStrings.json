{
  "desc0": "A warmup question, not much to it.\r\n\r\nThe solution is just a Math.pow() function, wrapped in the solution function, totally unnecessary, but keeps the solution format uniform.",
  "desc1": "The pink text is encoded with a simple shift cypher.\r\n\r\nAll that needs to be done, is to shift every letter to the right by 2, wrapping around to the beginning if needed. Characters other than letters are ignored",
  "desc2": "In the website source, there is a very long string of characters (link to the file with the string below), that needs to be filtered for unique characters.\r\n\r\nThis is done by first looping over the string, and keeping track how many times each character appeared in the 'counts' object, then deleting properties that have a value bigger than 1, and returning a joined string of keys, that remain in 'counts'",
  "desc3": "This is an another one with a long string in the website source (file below). \r\n\r\nThis time, a substrings in exact 'AAAbCCC' format need to be found in the long string. Solution to that problem is a regex. After checking the entire string, we get an array of matches. We only care about the lowercase letter in the middle, so the solution is to return a joined string of 3rd element of each match.",
  "desc4": "Clicking the image takes us to the page with different address, and just 'and the next nothing is 44827' string for content.\r\n\r\nThe solution now, is to follow along the number sequence, by replacing the 'nothing' parameter with the number from the website content.\r\n\r\nWe encounter two problems along the way: Halfway, we are asked to start dividing the given number by two, and later some additional numbers appear in the website content, that are meant to mislead the regex used to extract the numbers from the string. The if statemets in resp.on take care of that.\r\n\r\nNote: The part of opening and checking the url contents is done in separate function in node, because of CORS issues.",
  "desc5": "So, this one is a bit of a pickle (pun intended). It requires you to find a long string once again and then \"unpickle\" it, into an object that, when correctly printed into the console will show the solution.\r\n\r\nSadly JS has no way to do the unpickling part. There exist all of 3 packages that can do that job, an none of them work in this particular scenario. \r\n\r\nSo for now the solution is empty. I'll update it if I ever come across unpickling for JS.",
  "desc6": "This one requires a package, that will be used to unpack and read contents of a .zip file. After unpacking and reading the \"readme.txt\" we are met with similar challenge to the one in #4. We go through the list of entries in our file, extracting the file name of the next one from the contents, until instead of \"Next nothing is xxxx\" message, we get: \"Collect the comments\".\r\n\r\nZip files can contain some comments, so we gather them from the list of entries inside of the loop, and print them to the console, joined.\r\n\r\nThe rest is simple, read the solution from the console, realize that the \"image\" text is a red herring, and the actual solution is hidden in the letters making up the bigger letters.",
  "desc7": "This one contains no hints, just an image with a message encoded in the greyscale strip in the middle.\r\n\r\nTo extract the message, we need to get the rgba data of from each of the little rectangles, and map the color values to ASCII characters.\r\n\r\nSince Javascript canvas has a method to access image data, the solution for this challenge is a React component, where first the image is drawn, and then the color values are gathered and decoded in the loop."
}
