{
  "solution0": "const solution0 = (number: number, power: number) => {\r\n  return Math.pow(number, power);\r\n};",
  "solution1": "const solution1 = (string: string, shiftBy: number) => {\r\n  const letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\r\n\r\n  const splitString = string.split('');\r\n\r\n  const shiftedString = splitString.map((char) => {\r\n    const letterIdx = letters.findIndex((letter) => {\r\n      return letter === char;\r\n    });\r\n\r\n    if (letterIdx === -1) {\r\n      return char;\r\n    }\r\n\r\n    //wrapping around the letters arr\r\n    if (letterIdx + shiftBy >= letters.length) {\r\n      return letters[letterIdx + shiftBy - letters.length];\r\n    }\r\n\r\n    return letters[letterIdx + shiftBy];\r\n  });\r\n\r\n  return shiftedString.join('');\r\n};\r\n",
  "solution2": "const solution2 = (text: string) => {\r\n  const counts: { [string: string]: number } = {};\r\n\r\n  text.split('').forEach((el: string) => {\r\n    if (!Object.keys(counts).includes(el)) {\r\n      counts[el] = 1;\r\n    } else {\r\n      counts[el] += 1;\r\n    }\r\n  });\r\n\r\n  Object.keys(counts).forEach((key) => {\r\n    if (counts[key] > 1) {\r\n      delete counts[key];\r\n    }\r\n  });\r\n\r\n  return Object.keys(counts).join('');\r\n};",
  "solution3": "const solution3 = (text: string) => {\r\n  const matches = text.match(/[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]/g);\r\n\r\n  const letters = matches?.map((match: string) => {\r\n    return match[4];\r\n  });\r\n\r\n  if (!matches) {\r\n    return '';\r\n  }\r\n\r\n  return letters?.join('') as string;\r\n};",
  "solution4": "//backend part, as nextjs api route\r\n\r\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\r\n  const url = `http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=${req.query.nothing}`;\r\n\r\n  const regex = /nothing is [0-9]+/g;\r\n\r\n  const request = http.get(url, (resp) => {\r\n    let data = '';\r\n    resp.on('data', (chunk) => {\r\n      data += chunk;\r\n    });\r\n    resp.on('end', () => {\r\n      const matches = data.match(regex);\r\n      if (matches) {\r\n        res.status(200).send({ matches: matches[0].substring(11) });\r\n      } else if (data.includes('Yes')) {\r\n        res.status(200).send({ halfWay: 'yes' });\r\n      } else {\r\n        res.status(200).send({ finished: data });\r\n      }\r\n    });\r\n  });\r\n  request.on('error', (err) => {\r\n    console.log(err);\r\n  });\r\n};\"\r\n\r\n//frontend part\r\n\r\nconst solution4 = async (nothing: number) => {\r\n  fetch(`api/solutions/forSolution4?nothing=${nothing}`)\r\n    .then((data) => {\r\n      return data.json();\r\n    })\r\n    .then((data) => {\r\n      if (data.matches) {\r\n        solution4(data.matches);\r\n      }\r\n      if (data.halfWay) {\r\n        solution4(16044 / 2);\r\n      }\r\n      if (data.finished) {\r\n        return data.finished;\r\n      }\r\n    });\r\n};",
  "solution5": "const solution5 = () => {\r\n  //sorry, there is nothing in here\r\n};\r\n",
  "solution6": "//We need to use node again, so backend first:\r\n\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\nimport StreamZip from 'node-stream-zip';\r\n\r\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\r\n  const zip = new StreamZip.async({\r\n    file: 'D:\\\\GitRepos\\\\pythonchallenge_js\\\\materials\\\\challenge6\\\\channel.zip',\r\n  });\r\n\r\n  const entries = await zip.entries();\r\n  const initialBuffer = await zip.entryData('94191.txt');\r\n  let fileText = initialBuffer.toString();\r\n  \r\n  const comments = [];\r\n\r\n  while (fileText.match(/[0-9]+/g)) {\r\n    const identifier = fileText.match(/[0-9]+/g);\r\n    const newBuffer = await zip.entryData(`${identifier}.txt`);\r\n    if (!identifier) {\r\n      fileText = newBuffer.toString();\r\n      comments.push(entries[`${identifier}.txt`].comment);\r\n      break;\r\n    }\r\n    fileText = newBuffer.toString();\r\n    comments.push(entries[`${identifier}.txt`].comment);\r\n  }\r\n\r\n  return res.status(200).json({ comments: comments });\r\n};\r\n\r\n//And the frontend portion, that just prints to the console\r\nconst solution6 = () => {\r\n  fetch('./api/solutions/forSolution6')\r\n    .then((data) => {\r\n      return data.json();\r\n    })\r\n    .then((data) => {\r\n      console.log(data.comments.join());\r\n    });\r\n};\r\n",
  "solution7": "const Solution7 = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas?.getContext('2d');\r\n    const img = new Image();\r\n    img.src = '/oxygen.png';\r\n    img.onload = () => {\r\n      if (canvas) {\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n      }\r\n      ctx?.drawImage(img, 0, 0, img.width, img.height);\r\n    };\r\n  }, []);\r\n\r\n  const getImageData = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas?.getContext('2d');\r\n\r\n    const pixels = [];\r\n\r\n    let i = 0;\r\n\r\n    while (i < 629) {\r\n      const pixelData = ctx?.getImageData(i, 92 / 2, 1, 1);\r\n      pixels.push(pixelData?.data[0]);\r\n      i += 7;\r\n    }\r\n\r\n    //See console for the decoded message and the solution\r\n    const decoded = pixels\r\n      .map((num) => {\r\n        return String.fromCharCode(num as number);\r\n      })\r\n      .join('');\r\n    console.log(decoded);\r\n\r\n    const matching = decoded.match(/(?<=\\[)(.*?)(?=\\])/);\r\n\r\n    if (matching) {\r\n      const finalString = matching[0]\r\n        .split(',')\r\n        .map((char) => {\r\n          return String.fromCharCode(+char);\r\n        })\r\n        .join('');\r\n\r\n      console.log(finalString);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center\">\r\n      <canvas className=\"mb-3\" ref={canvasRef} />\r\n      <Button onClick={() => getImageData()}>Try it!</Button>\r\n    </div>\r\n  );\r\n};"
}
