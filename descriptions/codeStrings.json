{
  "solution0": "const solution0 = (number: number, power: number) => {\r\n  return Math.pow(number, power);\r\n};",
  "solution1": "const solution1 = (string: string, shiftBy: number) => {\r\n  const letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\r\n\r\n  const splitString = string.split('');\r\n\r\n  const shiftedString = splitString.map((char) => {\r\n    const letterIdx = letters.findIndex((letter) => {\r\n      return letter === char;\r\n    });\r\n\r\n    if (letterIdx === -1) {\r\n      return char;\r\n    }\r\n\r\n    //wrapping around the letters arr\r\n    if (letterIdx + shiftBy >= letters.length) {\r\n      return letters[letterIdx + shiftBy - letters.length];\r\n    }\r\n\r\n    return letters[letterIdx + shiftBy];\r\n  });\r\n\r\n  return shiftedString.join('');\r\n};\r\n",
  "solution2": "const solution2 = (text: string) => {\r\n  const counts: { [string: string]: number } = {};\r\n\r\n  text.split('').forEach((el: string) => {\r\n    if (!Object.keys(counts).includes(el)) {\r\n      counts[el] = 1;\r\n    } else {\r\n      counts[el] += 1;\r\n    }\r\n  });\r\n\r\n  Object.keys(counts).forEach((key) => {\r\n    if (counts[key] > 1) {\r\n      delete counts[key];\r\n    }\r\n  });\r\n\r\n  return Object.keys(counts).join('');\r\n};",
  "solution3": "const solution3 = (text: string) => {\r\n  const matches = text.match(/[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]/g);\r\n\r\n  const letters = matches?.map((match: string) => {\r\n    return match[4];\r\n  });\r\n\r\n  if (!matches) {\r\n    return '';\r\n  }\r\n\r\n  return letters?.join('') as string;\r\n};",
  "solution4": "//backend part, as nextjs api route\r\n\r\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\r\n  const url = `http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=${req.query.nothing}`;\r\n\r\n  const regex = /nothing is [0-9]+/g;\r\n\r\n  const request = http.get(url, (resp) => {\r\n    let data = '';\r\n    resp.on('data', (chunk) => {\r\n      data += chunk;\r\n    });\r\n    resp.on('end', () => {\r\n      const matches = data.match(regex);\r\n      if (matches) {\r\n        res.status(200).send({ matches: matches[0].substring(11) });\r\n      } else if (data.includes('Yes')) {\r\n        res.status(200).send({ halfWay: 'yes' });\r\n      } else {\r\n        res.status(200).send({ finished: data });\r\n      }\r\n    });\r\n  });\r\n  request.on('error', (err) => {\r\n    console.log(err);\r\n  });\r\n};\"\r\n\r\n//frontend part\r\n\r\nconst solution4 = async (nothing: number) => {\r\n  fetch(`api/solutions/forSolution4?nothing=${nothing}`)\r\n    .then((data) => {\r\n      return data.json();\r\n    })\r\n    .then((data) => {\r\n      if (data.matches) {\r\n        solution4(data.matches);\r\n      }\r\n      if (data.halfWay) {\r\n        solution4(16044 / 2);\r\n      }\r\n      if (data.finished) {\r\n        return data.finished;\r\n      }\r\n    });\r\n};",
  "solution5": "const solution5 = () => {\r\n  //sorry, there is nothing in here\r\n};\r\n"
}
